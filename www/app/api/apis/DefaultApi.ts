/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateTranscript,
  DeletionStatus,
  GetTranscript,
  HTTPValidationError,
  PageGetTranscript,
  RtcOffer,
  UpdateTranscript,
} from "../models";
import {
  CreateTranscriptFromJSON,
  CreateTranscriptToJSON,
  DeletionStatusFromJSON,
  DeletionStatusToJSON,
  GetTranscriptFromJSON,
  GetTranscriptToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  PageGetTranscriptFromJSON,
  PageGetTranscriptToJSON,
  RtcOfferFromJSON,
  RtcOfferToJSON,
  UpdateTranscriptFromJSON,
  UpdateTranscriptToJSON,
} from "../models";

export interface RtcOfferOfferPostRequest {
  rtcOffer: RtcOffer;
}

export interface TranscriptDeleteV1TranscriptsTranscriptIdDeleteRequest {
  transcriptId: any;
}

export interface TranscriptGetAudioV1TranscriptsTranscriptIdAudioGetRequest {
  transcriptId: any;
}

export interface TranscriptGetTopicsV1TranscriptsTranscriptIdTopicsGetRequest {
  transcriptId: any;
}

export interface TranscriptGetV1TranscriptsTranscriptIdGetRequest {
  transcriptId: any;
}

export interface TranscriptGetWebsocketEventsV1TranscriptsTranscriptIdEventsGetRequest {
  transcriptId: any;
}

export interface TranscriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPostRequest {
  transcriptId: any;
  rtcOffer: RtcOffer;
}

export interface TranscriptUpdateV1TranscriptsTranscriptIdPatchRequest {
  transcriptId: any;
  updateTranscript: UpdateTranscript;
}

export interface TranscriptsCreateV1TranscriptsPostRequest {
  createTranscript: CreateTranscript;
}

export interface TranscriptsListV1TranscriptsGetRequest {
  page?: any;
  size?: any;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Rtc Offer
   */
  async rtcOfferOfferPostRaw(
    requestParameters: RtcOfferOfferPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.rtcOffer === null ||
      requestParameters.rtcOffer === undefined
    ) {
      throw new runtime.RequiredError(
        "rtcOffer",
        "Required parameter requestParameters.rtcOffer was null or undefined when calling rtcOfferOfferPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/offer`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RtcOfferToJSON(requestParameters.rtcOffer),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Rtc Offer
   */
  async rtcOfferOfferPost(
    requestParameters: RtcOfferOfferPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.rtcOfferOfferPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Transcript Delete
   */
  async transcriptDeleteV1TranscriptsTranscriptIdDeleteRaw(
    requestParameters: TranscriptDeleteV1TranscriptsTranscriptIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeletionStatus>> {
    if (
      requestParameters.transcriptId === null ||
      requestParameters.transcriptId === undefined
    ) {
      throw new runtime.RequiredError(
        "transcriptId",
        "Required parameter requestParameters.transcriptId was null or undefined when calling transcriptDeleteV1TranscriptsTranscriptIdDelete.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/transcripts/{transcript_id}`.replace(
          `{${"transcript_id"}}`,
          encodeURIComponent(String(requestParameters.transcriptId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeletionStatusFromJSON(jsonValue),
    );
  }

  /**
   * Transcript Delete
   */
  async transcriptDeleteV1TranscriptsTranscriptIdDelete(
    requestParameters: TranscriptDeleteV1TranscriptsTranscriptIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeletionStatus> {
    const response =
      await this.transcriptDeleteV1TranscriptsTranscriptIdDeleteRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Transcript Get Audio
   */
  async transcriptGetAudioV1TranscriptsTranscriptIdAudioGetRaw(
    requestParameters: TranscriptGetAudioV1TranscriptsTranscriptIdAudioGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.transcriptId === null ||
      requestParameters.transcriptId === undefined
    ) {
      throw new runtime.RequiredError(
        "transcriptId",
        "Required parameter requestParameters.transcriptId was null or undefined when calling transcriptGetAudioV1TranscriptsTranscriptIdAudioGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/transcripts/{transcript_id}/audio`.replace(
          `{${"transcript_id"}}`,
          encodeURIComponent(String(requestParameters.transcriptId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Transcript Get Audio
   */
  async transcriptGetAudioV1TranscriptsTranscriptIdAudioGet(
    requestParameters: TranscriptGetAudioV1TranscriptsTranscriptIdAudioGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.transcriptGetAudioV1TranscriptsTranscriptIdAudioGetRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Transcript Get Topics
   */
  async transcriptGetTopicsV1TranscriptsTranscriptIdTopicsGetRaw(
    requestParameters: TranscriptGetTopicsV1TranscriptsTranscriptIdTopicsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.transcriptId === null ||
      requestParameters.transcriptId === undefined
    ) {
      throw new runtime.RequiredError(
        "transcriptId",
        "Required parameter requestParameters.transcriptId was null or undefined when calling transcriptGetTopicsV1TranscriptsTranscriptIdTopicsGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/transcripts/{transcript_id}/topics`.replace(
          `{${"transcript_id"}}`,
          encodeURIComponent(String(requestParameters.transcriptId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Transcript Get Topics
   */
  async transcriptGetTopicsV1TranscriptsTranscriptIdTopicsGet(
    requestParameters: TranscriptGetTopicsV1TranscriptsTranscriptIdTopicsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.transcriptGetTopicsV1TranscriptsTranscriptIdTopicsGetRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Transcript Get
   */
  async transcriptGetV1TranscriptsTranscriptIdGetRaw(
    requestParameters: TranscriptGetV1TranscriptsTranscriptIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetTranscript>> {
    if (
      requestParameters.transcriptId === null ||
      requestParameters.transcriptId === undefined
    ) {
      throw new runtime.RequiredError(
        "transcriptId",
        "Required parameter requestParameters.transcriptId was null or undefined when calling transcriptGetV1TranscriptsTranscriptIdGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/transcripts/{transcript_id}`.replace(
          `{${"transcript_id"}}`,
          encodeURIComponent(String(requestParameters.transcriptId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetTranscriptFromJSON(jsonValue),
    );
  }

  /**
   * Transcript Get
   */
  async transcriptGetV1TranscriptsTranscriptIdGet(
    requestParameters: TranscriptGetV1TranscriptsTranscriptIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetTranscript> {
    const response = await this.transcriptGetV1TranscriptsTranscriptIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Transcript Get Websocket Events
   */
  async transcriptGetWebsocketEventsV1TranscriptsTranscriptIdEventsGetRaw(
    requestParameters: TranscriptGetWebsocketEventsV1TranscriptsTranscriptIdEventsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.transcriptId === null ||
      requestParameters.transcriptId === undefined
    ) {
      throw new runtime.RequiredError(
        "transcriptId",
        "Required parameter requestParameters.transcriptId was null or undefined when calling transcriptGetWebsocketEventsV1TranscriptsTranscriptIdEventsGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/transcripts/{transcript_id}/events`.replace(
          `{${"transcript_id"}}`,
          encodeURIComponent(String(requestParameters.transcriptId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Transcript Get Websocket Events
   */
  async transcriptGetWebsocketEventsV1TranscriptsTranscriptIdEventsGet(
    requestParameters: TranscriptGetWebsocketEventsV1TranscriptsTranscriptIdEventsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.transcriptGetWebsocketEventsV1TranscriptsTranscriptIdEventsGetRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Transcript Record Webrtc
   */
  async transcriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPostRaw(
    requestParameters: TranscriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.transcriptId === null ||
      requestParameters.transcriptId === undefined
    ) {
      throw new runtime.RequiredError(
        "transcriptId",
        "Required parameter requestParameters.transcriptId was null or undefined when calling transcriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPost.",
      );
    }

    if (
      requestParameters.rtcOffer === null ||
      requestParameters.rtcOffer === undefined
    ) {
      throw new runtime.RequiredError(
        "rtcOffer",
        "Required parameter requestParameters.rtcOffer was null or undefined when calling transcriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/transcripts/{transcript_id}/record/webrtc`.replace(
          `{${"transcript_id"}}`,
          encodeURIComponent(String(requestParameters.transcriptId)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RtcOfferToJSON(requestParameters.rtcOffer),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Transcript Record Webrtc
   */
  async transcriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPost(
    requestParameters: TranscriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.transcriptRecordWebrtcV1TranscriptsTranscriptIdRecordWebrtcPostRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Transcript Update
   */
  async transcriptUpdateV1TranscriptsTranscriptIdPatchRaw(
    requestParameters: TranscriptUpdateV1TranscriptsTranscriptIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetTranscript>> {
    if (
      requestParameters.transcriptId === null ||
      requestParameters.transcriptId === undefined
    ) {
      throw new runtime.RequiredError(
        "transcriptId",
        "Required parameter requestParameters.transcriptId was null or undefined when calling transcriptUpdateV1TranscriptsTranscriptIdPatch.",
      );
    }

    if (
      requestParameters.updateTranscript === null ||
      requestParameters.updateTranscript === undefined
    ) {
      throw new runtime.RequiredError(
        "updateTranscript",
        "Required parameter requestParameters.updateTranscript was null or undefined when calling transcriptUpdateV1TranscriptsTranscriptIdPatch.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/transcripts/{transcript_id}`.replace(
          `{${"transcript_id"}}`,
          encodeURIComponent(String(requestParameters.transcriptId)),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateTranscriptToJSON(requestParameters.updateTranscript),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetTranscriptFromJSON(jsonValue),
    );
  }

  /**
   * Transcript Update
   */
  async transcriptUpdateV1TranscriptsTranscriptIdPatch(
    requestParameters: TranscriptUpdateV1TranscriptsTranscriptIdPatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetTranscript> {
    const response =
      await this.transcriptUpdateV1TranscriptsTranscriptIdPatchRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Transcripts Create
   */
  async transcriptsCreateV1TranscriptsPostRaw(
    requestParameters: TranscriptsCreateV1TranscriptsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetTranscript>> {
    if (
      requestParameters.createTranscript === null ||
      requestParameters.createTranscript === undefined
    ) {
      throw new runtime.RequiredError(
        "createTranscript",
        "Required parameter requestParameters.createTranscript was null or undefined when calling transcriptsCreateV1TranscriptsPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/transcripts`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateTranscriptToJSON(requestParameters.createTranscript),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetTranscriptFromJSON(jsonValue),
    );
  }

  /**
   * Transcripts Create
   */
  async transcriptsCreateV1TranscriptsPost(
    requestParameters: TranscriptsCreateV1TranscriptsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetTranscript> {
    const response = await this.transcriptsCreateV1TranscriptsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Transcripts List
   */
  async transcriptsListV1TranscriptsGetRaw(
    requestParameters: TranscriptsListV1TranscriptsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PageGetTranscript>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters["size"] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/transcripts`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PageGetTranscriptFromJSON(jsonValue),
    );
  }

  /**
   * Transcripts List
   */
  async transcriptsListV1TranscriptsGet(
    requestParameters: TranscriptsListV1TranscriptsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PageGetTranscript> {
    const response = await this.transcriptsListV1TranscriptsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
