// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "./client";
import type {
  MetricsData,
  MetricsResponses,
  V1MeetingAudioConsentData,
  V1MeetingAudioConsentResponses,
  V1MeetingAudioConsentErrors,
  V1RoomsListData,
  V1RoomsListResponses,
  V1RoomsListErrors,
  V1RoomsCreateData,
  V1RoomsCreateResponses,
  V1RoomsCreateErrors,
  V1RoomsDeleteData,
  V1RoomsDeleteResponses,
  V1RoomsDeleteErrors,
  V1RoomsUpdateData,
  V1RoomsUpdateResponses,
  V1RoomsUpdateErrors,
  V1RoomsCreateMeetingData,
  V1RoomsCreateMeetingResponses,
  V1RoomsCreateMeetingErrors,
  V1TranscriptsListData,
  V1TranscriptsListResponses,
  V1TranscriptsListErrors,
  V1TranscriptsCreateData,
  V1TranscriptsCreateResponses,
  V1TranscriptsCreateErrors,
  V1TranscriptDeleteData,
  V1TranscriptDeleteResponses,
  V1TranscriptDeleteErrors,
  V1TranscriptGetData,
  V1TranscriptGetResponses,
  V1TranscriptGetErrors,
  V1TranscriptUpdateData,
  V1TranscriptUpdateResponses,
  V1TranscriptUpdateErrors,
  V1TranscriptGetTopicsData,
  V1TranscriptGetTopicsResponses,
  V1TranscriptGetTopicsErrors,
  V1TranscriptGetTopicsWithWordsData,
  V1TranscriptGetTopicsWithWordsResponses,
  V1TranscriptGetTopicsWithWordsErrors,
  V1TranscriptGetTopicsWithWordsPerSpeakerData,
  V1TranscriptGetTopicsWithWordsPerSpeakerResponses,
  V1TranscriptGetTopicsWithWordsPerSpeakerErrors,
  V1TranscriptPostToZulipData,
  V1TranscriptPostToZulipResponses,
  V1TranscriptPostToZulipErrors,
  V1TranscriptGetAudioMp3Data,
  V1TranscriptGetAudioMp3Responses,
  V1TranscriptGetAudioMp3Errors,
  V1TranscriptHeadAudioMp3Data,
  V1TranscriptHeadAudioMp3Responses,
  V1TranscriptHeadAudioMp3Errors,
  V1TranscriptGetAudioWaveformData,
  V1TranscriptGetAudioWaveformResponses,
  V1TranscriptGetAudioWaveformErrors,
  V1TranscriptGetParticipantsData,
  V1TranscriptGetParticipantsResponses,
  V1TranscriptGetParticipantsErrors,
  V1TranscriptAddParticipantData,
  V1TranscriptAddParticipantResponses,
  V1TranscriptAddParticipantErrors,
  V1TranscriptDeleteParticipantData,
  V1TranscriptDeleteParticipantResponses,
  V1TranscriptDeleteParticipantErrors,
  V1TranscriptGetParticipantData,
  V1TranscriptGetParticipantResponses,
  V1TranscriptGetParticipantErrors,
  V1TranscriptUpdateParticipantData,
  V1TranscriptUpdateParticipantResponses,
  V1TranscriptUpdateParticipantErrors,
  V1TranscriptAssignSpeakerData,
  V1TranscriptAssignSpeakerResponses,
  V1TranscriptAssignSpeakerErrors,
  V1TranscriptMergeSpeakerData,
  V1TranscriptMergeSpeakerResponses,
  V1TranscriptMergeSpeakerErrors,
  V1TranscriptRecordUploadData,
  V1TranscriptRecordUploadResponses,
  V1TranscriptRecordUploadErrors,
  V1TranscriptGetWebsocketEventsData,
  V1TranscriptGetWebsocketEventsResponses,
  V1TranscriptGetWebsocketEventsErrors,
  V1TranscriptRecordWebrtcData,
  V1TranscriptRecordWebrtcResponses,
  V1TranscriptRecordWebrtcErrors,
  V1TranscriptProcessData,
  V1TranscriptProcessResponses,
  V1TranscriptProcessErrors,
  V1UserMeData,
  V1UserMeResponses,
  V1ZulipGetStreamsData,
  V1ZulipGetStreamsResponses,
  V1ZulipGetTopicsData,
  V1ZulipGetTopicsResponses,
  V1ZulipGetTopicsErrors,
  V1WherebyWebhookData,
  V1WherebyWebhookResponses,
  V1WherebyWebhookErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Metrics
 * Endpoint that serves Prometheus metrics.
 */
export const metrics = <ThrowOnError extends boolean = false>(
  options?: Options<MetricsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MetricsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/metrics",
    ...options,
  });
};

/**
 * Meeting Audio Consent
 */
export const v1MeetingAudioConsent = <ThrowOnError extends boolean = false>(
  options: Options<V1MeetingAudioConsentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1MeetingAudioConsentResponses,
    V1MeetingAudioConsentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/meetings/{meeting_id}/consent",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Rooms List
 */
export const v1RoomsList = <ThrowOnError extends boolean = false>(
  options?: Options<V1RoomsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    V1RoomsListResponses,
    V1RoomsListErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/rooms",
    ...options,
  });
};

/**
 * Rooms Create
 */
export const v1RoomsCreate = <ThrowOnError extends boolean = false>(
  options: Options<V1RoomsCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1RoomsCreateResponses,
    V1RoomsCreateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/rooms",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Rooms Delete
 */
export const v1RoomsDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1RoomsDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    V1RoomsDeleteResponses,
    V1RoomsDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/rooms/{room_id}",
    ...options,
  });
};

/**
 * Rooms Update
 */
export const v1RoomsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1RoomsUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    V1RoomsUpdateResponses,
    V1RoomsUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/rooms/{room_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Rooms Create Meeting
 */
export const v1RoomsCreateMeeting = <ThrowOnError extends boolean = false>(
  options: Options<V1RoomsCreateMeetingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1RoomsCreateMeetingResponses,
    V1RoomsCreateMeetingErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/rooms/{room_name}/meeting",
    ...options,
  });
};

/**
 * Transcripts List
 */
export const v1TranscriptsList = <ThrowOnError extends boolean = false>(
  options?: Options<V1TranscriptsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    V1TranscriptsListResponses,
    V1TranscriptsListErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts",
    ...options,
  });
};

/**
 * Transcripts Create
 */
export const v1TranscriptsCreate = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptsCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1TranscriptsCreateResponses,
    V1TranscriptsCreateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Transcript Delete
 */
export const v1TranscriptDelete = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    V1TranscriptDeleteResponses,
    V1TranscriptDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}",
    ...options,
  });
};

/**
 * Transcript Get
 */
export const v1TranscriptGet = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetResponses,
    V1TranscriptGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}",
    ...options,
  });
};

/**
 * Transcript Update
 */
export const v1TranscriptUpdate = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    V1TranscriptUpdateResponses,
    V1TranscriptUpdateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Transcript Get Topics
 */
export const v1TranscriptGetTopics = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptGetTopicsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetTopicsResponses,
    V1TranscriptGetTopicsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/topics",
    ...options,
  });
};

/**
 * Transcript Get Topics With Words
 */
export const v1TranscriptGetTopicsWithWords = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptGetTopicsWithWordsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetTopicsWithWordsResponses,
    V1TranscriptGetTopicsWithWordsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/topics/with-words",
    ...options,
  });
};

/**
 * Transcript Get Topics With Words Per Speaker
 */
export const v1TranscriptGetTopicsWithWordsPerSpeaker = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptGetTopicsWithWordsPerSpeakerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetTopicsWithWordsPerSpeakerResponses,
    V1TranscriptGetTopicsWithWordsPerSpeakerErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/topics/{topic_id}/words-per-speaker",
    ...options,
  });
};

/**
 * Transcript Post To Zulip
 */
export const v1TranscriptPostToZulip = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptPostToZulipData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1TranscriptPostToZulipResponses,
    V1TranscriptPostToZulipErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/zulip",
    ...options,
  });
};

/**
 * Transcript Get Audio Mp3
 */
export const v1TranscriptGetAudioMp3 = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptGetAudioMp3Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetAudioMp3Responses,
    V1TranscriptGetAudioMp3Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/audio/mp3",
    ...options,
  });
};

/**
 * Transcript Get Audio Mp3
 */
export const v1TranscriptHeadAudioMp3 = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptHeadAudioMp3Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).head<
    V1TranscriptHeadAudioMp3Responses,
    V1TranscriptHeadAudioMp3Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/audio/mp3",
    ...options,
  });
};

/**
 * Transcript Get Audio Waveform
 */
export const v1TranscriptGetAudioWaveform = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptGetAudioWaveformData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetAudioWaveformResponses,
    V1TranscriptGetAudioWaveformErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/audio/waveform",
    ...options,
  });
};

/**
 * Transcript Get Participants
 */
export const v1TranscriptGetParticipants = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptGetParticipantsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetParticipantsResponses,
    V1TranscriptGetParticipantsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/participants",
    ...options,
  });
};

/**
 * Transcript Add Participant
 */
export const v1TranscriptAddParticipant = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptAddParticipantData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1TranscriptAddParticipantResponses,
    V1TranscriptAddParticipantErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/participants",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Transcript Delete Participant
 */
export const v1TranscriptDeleteParticipant = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptDeleteParticipantData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    V1TranscriptDeleteParticipantResponses,
    V1TranscriptDeleteParticipantErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/participants/{participant_id}",
    ...options,
  });
};

/**
 * Transcript Get Participant
 */
export const v1TranscriptGetParticipant = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptGetParticipantData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetParticipantResponses,
    V1TranscriptGetParticipantErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/participants/{participant_id}",
    ...options,
  });
};

/**
 * Transcript Update Participant
 */
export const v1TranscriptUpdateParticipant = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptUpdateParticipantData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    V1TranscriptUpdateParticipantResponses,
    V1TranscriptUpdateParticipantErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/participants/{participant_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Transcript Assign Speaker
 */
export const v1TranscriptAssignSpeaker = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptAssignSpeakerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    V1TranscriptAssignSpeakerResponses,
    V1TranscriptAssignSpeakerErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/speaker/assign",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Transcript Merge Speaker
 */
export const v1TranscriptMergeSpeaker = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptMergeSpeakerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    V1TranscriptMergeSpeakerResponses,
    V1TranscriptMergeSpeakerErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/speaker/merge",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Transcript Record Upload
 */
export const v1TranscriptRecordUpload = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptRecordUploadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1TranscriptRecordUploadResponses,
    V1TranscriptRecordUploadErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/record/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options.headers,
    },
  });
};

/**
 * Transcript Get Websocket Events
 */
export const v1TranscriptGetWebsocketEvents = <
  ThrowOnError extends boolean = false,
>(
  options: Options<V1TranscriptGetWebsocketEventsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1TranscriptGetWebsocketEventsResponses,
    V1TranscriptGetWebsocketEventsErrors,
    ThrowOnError
  >({
    url: "/v1/transcripts/{transcript_id}/events",
    ...options,
  });
};

/**
 * Transcript Record Webrtc
 */
export const v1TranscriptRecordWebrtc = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptRecordWebrtcData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1TranscriptRecordWebrtcResponses,
    V1TranscriptRecordWebrtcErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/record/webrtc",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Transcript Process
 */
export const v1TranscriptProcess = <ThrowOnError extends boolean = false>(
  options: Options<V1TranscriptProcessData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1TranscriptProcessResponses,
    V1TranscriptProcessErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/transcripts/{transcript_id}/process",
    ...options,
  });
};

/**
 * User Me
 */
export const v1UserMe = <ThrowOnError extends boolean = false>(
  options?: Options<V1UserMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    V1UserMeResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/me",
    ...options,
  });
};

/**
 * Zulip Get Streams
 * Get all Zulip streams.
 */
export const v1ZulipGetStreams = <ThrowOnError extends boolean = false>(
  options?: Options<V1ZulipGetStreamsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    V1ZulipGetStreamsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/zulip/streams",
    ...options,
  });
};

/**
 * Zulip Get Topics
 * Get all topics for a specific Zulip stream.
 */
export const v1ZulipGetTopics = <ThrowOnError extends boolean = false>(
  options: Options<V1ZulipGetTopicsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    V1ZulipGetTopicsResponses,
    V1ZulipGetTopicsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/zulip/streams/{stream_id}/topics",
    ...options,
  });
};

/**
 * Whereby Webhook
 */
export const v1WherebyWebhook = <ThrowOnError extends boolean = false>(
  options: Options<V1WherebyWebhookData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    V1WherebyWebhookResponses,
    V1WherebyWebhookErrors,
    ThrowOnError
  >({
    url: "/v1/whereby",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
