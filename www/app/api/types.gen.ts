// This file is auto-generated by @hey-api/openapi-ts

/**
 * AudioWaveform
 */
export type AudioWaveform = {
  /**
   * Data
   */
  data: Array<number>;
};

/**
 * Body_transcript_record_upload_v1_transcripts__transcript_id__record_upload_post
 */
export type BodyTranscriptRecordUploadV1TranscriptsTranscriptIdRecordUploadPost =
  {
    /**
     * Chunk
     */
    chunk: Blob | File;
  };

/**
 * CreateParticipant
 */
export type CreateParticipant = {
  /**
   * Speaker
   */
  speaker?: number | null;
  /**
   * Name
   */
  name: string;
};

/**
 * CreateRoom
 */
export type CreateRoom = {
  /**
   * Name
   */
  name: string;
  /**
   * Zulip Auto Post
   */
  zulip_auto_post: boolean;
  /**
   * Zulip Stream
   */
  zulip_stream: string;
  /**
   * Zulip Topic
   */
  zulip_topic: string;
  /**
   * Is Locked
   */
  is_locked: boolean;
  /**
   * Room Mode
   */
  room_mode: string;
  /**
   * Recording Type
   */
  recording_type: string;
  /**
   * Recording Trigger
   */
  recording_trigger: string;
  /**
   * Is Shared
   */
  is_shared: boolean;
  /**
   * Background Information
   */
  background_information?: string;
};

/**
 * CreateTranscript
 */
export type CreateTranscript = {
  /**
   * Name
   */
  name: string;
  /**
   * Source Language
   */
  source_language?: string;
  /**
   * Target Language
   */
  target_language?: string;
};

/**
 * DeletionStatus
 */
export type DeletionStatus = {
  /**
   * Status
   */
  status: string;
};

/**
 * GetTranscript
 */
export type GetTranscript = {
  /**
   * Id
   */
  id: string;
  /**
   * User Id
   */
  user_id: string | null;
  /**
   * Name
   */
  name: string;
  /**
   * Status
   */
  status: string;
  /**
   * Locked
   */
  locked: boolean;
  /**
   * Duration
   */
  duration: number;
  /**
   * Title
   */
  title: string | null;
  /**
   * Short Summary
   */
  short_summary: string | null;
  /**
   * Long Summary
   */
  long_summary: string | null;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Share Mode
   */
  share_mode?: string;
  /**
   * Source Language
   */
  source_language: string | null;
  /**
   * Target Language
   */
  target_language: string | null;
  /**
   * Reviewed
   */
  reviewed: boolean;
  /**
   * Meeting Id
   */
  meeting_id: string | null;
  source_kind: SourceKind;
  /**
   * Room Id
   */
  room_id?: string | null;
  /**
   * Room Name
   */
  room_name?: string | null;
  /**
   * Audio Deleted
   */
  audio_deleted?: boolean | null;
  /**
   * Participants
   */
  participants: Array<TranscriptParticipant> | null;
};

/**
 * GetTranscriptMinimal
 */
export type GetTranscriptMinimal = {
  /**
   * Id
   */
  id: string;
  /**
   * User Id
   */
  user_id: string | null;
  /**
   * Name
   */
  name: string;
  /**
   * Status
   */
  status: string;
  /**
   * Locked
   */
  locked: boolean;
  /**
   * Duration
   */
  duration: number;
  /**
   * Title
   */
  title: string | null;
  /**
   * Short Summary
   */
  short_summary: string | null;
  /**
   * Long Summary
   */
  long_summary: string | null;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Share Mode
   */
  share_mode?: string;
  /**
   * Source Language
   */
  source_language: string | null;
  /**
   * Target Language
   */
  target_language: string | null;
  /**
   * Reviewed
   */
  reviewed: boolean;
  /**
   * Meeting Id
   */
  meeting_id: string | null;
  source_kind: SourceKind;
  /**
   * Room Id
   */
  room_id?: string | null;
  /**
   * Room Name
   */
  room_name?: string | null;
  /**
   * Audio Deleted
   */
  audio_deleted?: boolean | null;
};

/**
 * GetTranscriptSegmentTopic
 */
export type GetTranscriptSegmentTopic = {
  /**
   * Text
   */
  text: string;
  /**
   * Start
   */
  start: number;
  /**
   * Speaker
   */
  speaker: number;
};

/**
 * GetTranscriptTopic
 */
export type GetTranscriptTopic = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title: string;
  /**
   * Summary
   */
  summary: string;
  /**
   * Timestamp
   */
  timestamp: number;
  /**
   * Duration
   */
  duration: number | null;
  /**
   * Transcript
   */
  transcript: string;
  /**
   * Segments
   */
  segments?: Array<GetTranscriptSegmentTopic>;
};

/**
 * GetTranscriptTopicWithWords
 */
export type GetTranscriptTopicWithWords = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title: string;
  /**
   * Summary
   */
  summary: string;
  /**
   * Timestamp
   */
  timestamp: number;
  /**
   * Duration
   */
  duration: number | null;
  /**
   * Transcript
   */
  transcript: string;
  /**
   * Segments
   */
  segments?: Array<GetTranscriptSegmentTopic>;
  /**
   * Words
   */
  words?: Array<Word>;
};

/**
 * GetTranscriptTopicWithWordsPerSpeaker
 */
export type GetTranscriptTopicWithWordsPerSpeaker = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title: string;
  /**
   * Summary
   */
  summary: string;
  /**
   * Timestamp
   */
  timestamp: number;
  /**
   * Duration
   */
  duration: number | null;
  /**
   * Transcript
   */
  transcript: string;
  /**
   * Segments
   */
  segments?: Array<GetTranscriptSegmentTopic>;
  /**
   * Words Per Speaker
   */
  words_per_speaker?: Array<SpeakerWords>;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * Meeting
 */
export type Meeting = {
  /**
   * Id
   */
  id: string;
  /**
   * Room Name
   */
  room_name: string;
  /**
   * Room Url
   */
  room_url: string;
  /**
   * Host Room Url
   */
  host_room_url: string;
  /**
   * Start Date
   */
  start_date: string;
  /**
   * End Date
   */
  end_date: string;
  /**
   * Recording Type
   */
  recording_type?: "none" | "local" | "cloud";
};

/**
 * MeetingConsentRequest
 */
export type MeetingConsentRequest = {
  /**
   * Consent Given
   */
  consent_given: boolean;
};

/**
 * Page[GetTranscriptMinimal]
 */
export type PageGetTranscriptMinimal = {
  /**
   * Items
   */
  items: Array<GetTranscriptMinimal>;
  /**
   * Total
   */
  total?: number | null;
  /**
   * Page
   */
  page: number | null;
  /**
   * Size
   */
  size: number | null;
  /**
   * Pages
   */
  pages?: number | null;
};

/**
 * Page[Room]
 */
export type PageRoom = {
  /**
   * Items
   */
  items: Array<Room>;
  /**
   * Total
   */
  total?: number | null;
  /**
   * Page
   */
  page: number | null;
  /**
   * Size
   */
  size: number | null;
  /**
   * Pages
   */
  pages?: number | null;
};

/**
 * Participant
 */
export type Participant = {
  /**
   * Id
   */
  id: string;
  /**
   * Speaker
   */
  speaker: number | null;
  /**
   * Name
   */
  name: string;
};

/**
 * Room
 */
export type Room = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * User Id
   */
  user_id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Zulip Auto Post
   */
  zulip_auto_post: boolean;
  /**
   * Zulip Stream
   */
  zulip_stream: string;
  /**
   * Zulip Topic
   */
  zulip_topic: string;
  /**
   * Is Locked
   */
  is_locked: boolean;
  /**
   * Room Mode
   */
  room_mode: string;
  /**
   * Recording Type
   */
  recording_type: string;
  /**
   * Recording Trigger
   */
  recording_trigger: string;
  /**
   * Is Shared
   */
  is_shared: boolean;
  /**
   * Background Information
   */
  background_information: string;
};

/**
 * RtcOffer
 */
export type RtcOffer = {
  /**
   * Sdp
   */
  sdp: string;
  /**
   * Type
   */
  type: string;
};

/**
 * SourceKind
 */
export type SourceKind = "room" | "live" | "file";

/**
 * SpeakerAssignment
 */
export type SpeakerAssignment = {
  /**
   * Speaker
   */
  speaker?: number | null;
  /**
   * Participant
   */
  participant?: string | null;
  /**
   * Timestamp From
   */
  timestamp_from: number;
  /**
   * Timestamp To
   */
  timestamp_to: number;
};

/**
 * SpeakerAssignmentStatus
 */
export type SpeakerAssignmentStatus = {
  /**
   * Status
   */
  status: string;
};

/**
 * SpeakerMerge
 */
export type SpeakerMerge = {
  /**
   * Speaker From
   */
  speaker_from: number;
  /**
   * Speaker To
   */
  speaker_to: number;
};

/**
 * SpeakerWords
 */
export type SpeakerWords = {
  /**
   * Speaker
   */
  speaker: number;
  /**
   * Words
   */
  words: Array<Word>;
};

/**
 * Stream
 */
export type Stream = {
  /**
   * Stream Id
   */
  stream_id: number;
  /**
   * Name
   */
  name: string;
};

/**
 * Topic
 */
export type Topic = {
  /**
   * Name
   */
  name: string;
};

/**
 * TranscriptParticipant
 */
export type TranscriptParticipant = {
  /**
   * Id
   */
  id?: string;
  /**
   * Speaker
   */
  speaker: number | null;
  /**
   * Name
   */
  name: string;
};

/**
 * UpdateParticipant
 */
export type UpdateParticipant = {
  /**
   * Speaker
   */
  speaker?: number | null;
  /**
   * Name
   */
  name?: string | null;
};

/**
 * UpdateRoom
 */
export type UpdateRoom = {
  /**
   * Name
   */
  name: string;
  /**
   * Zulip Auto Post
   */
  zulip_auto_post: boolean;
  /**
   * Zulip Stream
   */
  zulip_stream: string;
  /**
   * Zulip Topic
   */
  zulip_topic: string;
  /**
   * Is Locked
   */
  is_locked: boolean;
  /**
   * Room Mode
   */
  room_mode: string;
  /**
   * Recording Type
   */
  recording_type: string;
  /**
   * Recording Trigger
   */
  recording_trigger: string;
  /**
   * Is Shared
   */
  is_shared: boolean;
  /**
   * Background Information
   */
  background_information?: string;
};

/**
 * UpdateTranscript
 */
export type UpdateTranscript = {
  /**
   * Name
   */
  name?: string | null;
  /**
   * Locked
   */
  locked?: boolean | null;
  /**
   * Title
   */
  title?: string | null;
  /**
   * Short Summary
   */
  short_summary?: string | null;
  /**
   * Long Summary
   */
  long_summary?: string | null;
  /**
   * Share Mode
   */
  share_mode?: ("public" | "semi-private" | "private") | null;
  /**
   * Participants
   */
  participants?: Array<TranscriptParticipant> | null;
  /**
   * Reviewed
   */
  reviewed?: boolean | null;
  /**
   * Audio Deleted
   */
  audio_deleted?: boolean | null;
};

/**
 * UserInfo
 */
export type UserInfo = {
  /**
   * Sub
   */
  sub: string;
  /**
   * Email
   */
  email: string | null;
  /**
   * Email Verified
   */
  email_verified: boolean | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

/**
 * WherebyWebhookEvent
 */
export type WherebyWebhookEvent = {
  /**
   * Apiversion
   */
  apiVersion: string;
  /**
   * Id
   */
  id: string;
  /**
   * Createdat
   */
  createdAt: string;
  /**
   * Type
   */
  type: string;
  /**
   * Data
   */
  data: {
    [key: string]: unknown;
  };
};

/**
 * Word
 */
export type Word = {
  /**
   * Text
   */
  text: string;
  /**
   * Start
   */
  start: number;
  /**
   * End
   */
  end: number;
  /**
   * Speaker
   */
  speaker?: number;
};

export type MetricsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/metrics";
};

export type MetricsResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1MeetingAudioConsentData = {
  body: MeetingConsentRequest;
  path: {
    /**
     * Meeting Id
     */
    meeting_id: string;
  };
  query?: never;
  url: "/v1/meetings/{meeting_id}/consent";
};

export type V1MeetingAudioConsentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1MeetingAudioConsentError =
  V1MeetingAudioConsentErrors[keyof V1MeetingAudioConsentErrors];

export type V1MeetingAudioConsentResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1RoomsListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     * Page number
     */
    page?: number;
    /**
     * Size
     * Page size
     */
    size?: number;
  };
  url: "/v1/rooms";
};

export type V1RoomsListErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1RoomsListError = V1RoomsListErrors[keyof V1RoomsListErrors];

export type V1RoomsListResponses = {
  /**
   * Successful Response
   */
  200: PageRoom;
};

export type V1RoomsListResponse =
  V1RoomsListResponses[keyof V1RoomsListResponses];

export type V1RoomsCreateData = {
  body: CreateRoom;
  path?: never;
  query?: never;
  url: "/v1/rooms";
};

export type V1RoomsCreateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1RoomsCreateError = V1RoomsCreateErrors[keyof V1RoomsCreateErrors];

export type V1RoomsCreateResponses = {
  /**
   * Successful Response
   */
  200: Room;
};

export type V1RoomsCreateResponse =
  V1RoomsCreateResponses[keyof V1RoomsCreateResponses];

export type V1RoomsDeleteData = {
  body?: never;
  path: {
    /**
     * Room Id
     */
    room_id: string;
  };
  query?: never;
  url: "/v1/rooms/{room_id}";
};

export type V1RoomsDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1RoomsDeleteError = V1RoomsDeleteErrors[keyof V1RoomsDeleteErrors];

export type V1RoomsDeleteResponses = {
  /**
   * Successful Response
   */
  200: DeletionStatus;
};

export type V1RoomsDeleteResponse =
  V1RoomsDeleteResponses[keyof V1RoomsDeleteResponses];

export type V1RoomsUpdateData = {
  body: UpdateRoom;
  path: {
    /**
     * Room Id
     */
    room_id: string;
  };
  query?: never;
  url: "/v1/rooms/{room_id}";
};

export type V1RoomsUpdateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1RoomsUpdateError = V1RoomsUpdateErrors[keyof V1RoomsUpdateErrors];

export type V1RoomsUpdateResponses = {
  /**
   * Successful Response
   */
  200: Room;
};

export type V1RoomsUpdateResponse =
  V1RoomsUpdateResponses[keyof V1RoomsUpdateResponses];

export type V1RoomsCreateMeetingData = {
  body?: never;
  path: {
    /**
     * Room Name
     */
    room_name: string;
  };
  query?: never;
  url: "/v1/rooms/{room_name}/meeting";
};

export type V1RoomsCreateMeetingErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1RoomsCreateMeetingError =
  V1RoomsCreateMeetingErrors[keyof V1RoomsCreateMeetingErrors];

export type V1RoomsCreateMeetingResponses = {
  /**
   * Successful Response
   */
  200: Meeting;
};

export type V1RoomsCreateMeetingResponse =
  V1RoomsCreateMeetingResponses[keyof V1RoomsCreateMeetingResponses];

export type V1TranscriptsListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Source Kind
     */
    source_kind?: SourceKind | null;
    /**
     * Room Id
     */
    room_id?: string | null;
    /**
     * Search Term
     */
    search_term?: string | null;
    /**
     * Page
     * Page number
     */
    page?: number;
    /**
     * Size
     * Page size
     */
    size?: number;
  };
  url: "/v1/transcripts";
};

export type V1TranscriptsListErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptsListError =
  V1TranscriptsListErrors[keyof V1TranscriptsListErrors];

export type V1TranscriptsListResponses = {
  /**
   * Successful Response
   */
  200: PageGetTranscriptMinimal;
};

export type V1TranscriptsListResponse =
  V1TranscriptsListResponses[keyof V1TranscriptsListResponses];

export type V1TranscriptsCreateData = {
  body: CreateTranscript;
  path?: never;
  query?: never;
  url: "/v1/transcripts";
};

export type V1TranscriptsCreateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptsCreateError =
  V1TranscriptsCreateErrors[keyof V1TranscriptsCreateErrors];

export type V1TranscriptsCreateResponses = {
  /**
   * Successful Response
   */
  200: GetTranscript;
};

export type V1TranscriptsCreateResponse =
  V1TranscriptsCreateResponses[keyof V1TranscriptsCreateResponses];

export type V1TranscriptDeleteData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}";
};

export type V1TranscriptDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptDeleteError =
  V1TranscriptDeleteErrors[keyof V1TranscriptDeleteErrors];

export type V1TranscriptDeleteResponses = {
  /**
   * Successful Response
   */
  200: DeletionStatus;
};

export type V1TranscriptDeleteResponse =
  V1TranscriptDeleteResponses[keyof V1TranscriptDeleteResponses];

export type V1TranscriptGetData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}";
};

export type V1TranscriptGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetError =
  V1TranscriptGetErrors[keyof V1TranscriptGetErrors];

export type V1TranscriptGetResponses = {
  /**
   * Successful Response
   */
  200: GetTranscript;
};

export type V1TranscriptGetResponse =
  V1TranscriptGetResponses[keyof V1TranscriptGetResponses];

export type V1TranscriptUpdateData = {
  body: UpdateTranscript;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}";
};

export type V1TranscriptUpdateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptUpdateError =
  V1TranscriptUpdateErrors[keyof V1TranscriptUpdateErrors];

export type V1TranscriptUpdateResponses = {
  /**
   * Successful Response
   */
  200: GetTranscript;
};

export type V1TranscriptUpdateResponse =
  V1TranscriptUpdateResponses[keyof V1TranscriptUpdateResponses];

export type V1TranscriptGetTopicsData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/topics";
};

export type V1TranscriptGetTopicsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetTopicsError =
  V1TranscriptGetTopicsErrors[keyof V1TranscriptGetTopicsErrors];

export type V1TranscriptGetTopicsResponses = {
  /**
   * Response Transcript Get Topics V1 Transcripts  Transcript Id  Topics Get
   * Successful Response
   */
  200: Array<GetTranscriptTopic>;
};

export type V1TranscriptGetTopicsResponse =
  V1TranscriptGetTopicsResponses[keyof V1TranscriptGetTopicsResponses];

export type V1TranscriptGetTopicsWithWordsData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/topics/with-words";
};

export type V1TranscriptGetTopicsWithWordsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetTopicsWithWordsError =
  V1TranscriptGetTopicsWithWordsErrors[keyof V1TranscriptGetTopicsWithWordsErrors];

export type V1TranscriptGetTopicsWithWordsResponses = {
  /**
   * Response Transcript Get Topics With Words V1 Transcripts  Transcript Id  Topics With Words Get
   * Successful Response
   */
  200: Array<GetTranscriptTopicWithWords>;
};

export type V1TranscriptGetTopicsWithWordsResponse =
  V1TranscriptGetTopicsWithWordsResponses[keyof V1TranscriptGetTopicsWithWordsResponses];

export type V1TranscriptGetTopicsWithWordsPerSpeakerData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
    /**
     * Topic Id
     */
    topic_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/topics/{topic_id}/words-per-speaker";
};

export type V1TranscriptGetTopicsWithWordsPerSpeakerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetTopicsWithWordsPerSpeakerError =
  V1TranscriptGetTopicsWithWordsPerSpeakerErrors[keyof V1TranscriptGetTopicsWithWordsPerSpeakerErrors];

export type V1TranscriptGetTopicsWithWordsPerSpeakerResponses = {
  /**
   * Successful Response
   */
  200: GetTranscriptTopicWithWordsPerSpeaker;
};

export type V1TranscriptGetTopicsWithWordsPerSpeakerResponse =
  V1TranscriptGetTopicsWithWordsPerSpeakerResponses[keyof V1TranscriptGetTopicsWithWordsPerSpeakerResponses];

export type V1TranscriptPostToZulipData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query: {
    /**
     * Stream
     */
    stream: string;
    /**
     * Topic
     */
    topic: string;
    /**
     * Include Topics
     */
    include_topics: boolean;
  };
  url: "/v1/transcripts/{transcript_id}/zulip";
};

export type V1TranscriptPostToZulipErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptPostToZulipError =
  V1TranscriptPostToZulipErrors[keyof V1TranscriptPostToZulipErrors];

export type V1TranscriptPostToZulipResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1TranscriptGetAudioMp3Data = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: {
    /**
     * Token
     */
    token?: string | null;
  };
  url: "/v1/transcripts/{transcript_id}/audio/mp3";
};

export type V1TranscriptGetAudioMp3Errors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetAudioMp3Error =
  V1TranscriptGetAudioMp3Errors[keyof V1TranscriptGetAudioMp3Errors];

export type V1TranscriptGetAudioMp3Responses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1TranscriptHeadAudioMp3Data = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: {
    /**
     * Token
     */
    token?: string | null;
  };
  url: "/v1/transcripts/{transcript_id}/audio/mp3";
};

export type V1TranscriptHeadAudioMp3Errors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptHeadAudioMp3Error =
  V1TranscriptHeadAudioMp3Errors[keyof V1TranscriptHeadAudioMp3Errors];

export type V1TranscriptHeadAudioMp3Responses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1TranscriptGetAudioWaveformData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/audio/waveform";
};

export type V1TranscriptGetAudioWaveformErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetAudioWaveformError =
  V1TranscriptGetAudioWaveformErrors[keyof V1TranscriptGetAudioWaveformErrors];

export type V1TranscriptGetAudioWaveformResponses = {
  /**
   * Successful Response
   */
  200: AudioWaveform;
};

export type V1TranscriptGetAudioWaveformResponse =
  V1TranscriptGetAudioWaveformResponses[keyof V1TranscriptGetAudioWaveformResponses];

export type V1TranscriptGetParticipantsData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/participants";
};

export type V1TranscriptGetParticipantsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetParticipantsError =
  V1TranscriptGetParticipantsErrors[keyof V1TranscriptGetParticipantsErrors];

export type V1TranscriptGetParticipantsResponses = {
  /**
   * Response Transcript Get Participants V1 Transcripts  Transcript Id  Participants Get
   * Successful Response
   */
  200: Array<Participant>;
};

export type V1TranscriptGetParticipantsResponse =
  V1TranscriptGetParticipantsResponses[keyof V1TranscriptGetParticipantsResponses];

export type V1TranscriptAddParticipantData = {
  body: CreateParticipant;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/participants";
};

export type V1TranscriptAddParticipantErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptAddParticipantError =
  V1TranscriptAddParticipantErrors[keyof V1TranscriptAddParticipantErrors];

export type V1TranscriptAddParticipantResponses = {
  /**
   * Successful Response
   */
  200: Participant;
};

export type V1TranscriptAddParticipantResponse =
  V1TranscriptAddParticipantResponses[keyof V1TranscriptAddParticipantResponses];

export type V1TranscriptDeleteParticipantData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
    /**
     * Participant Id
     */
    participant_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/participants/{participant_id}";
};

export type V1TranscriptDeleteParticipantErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptDeleteParticipantError =
  V1TranscriptDeleteParticipantErrors[keyof V1TranscriptDeleteParticipantErrors];

export type V1TranscriptDeleteParticipantResponses = {
  /**
   * Successful Response
   */
  200: DeletionStatus;
};

export type V1TranscriptDeleteParticipantResponse =
  V1TranscriptDeleteParticipantResponses[keyof V1TranscriptDeleteParticipantResponses];

export type V1TranscriptGetParticipantData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
    /**
     * Participant Id
     */
    participant_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/participants/{participant_id}";
};

export type V1TranscriptGetParticipantErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetParticipantError =
  V1TranscriptGetParticipantErrors[keyof V1TranscriptGetParticipantErrors];

export type V1TranscriptGetParticipantResponses = {
  /**
   * Successful Response
   */
  200: Participant;
};

export type V1TranscriptGetParticipantResponse =
  V1TranscriptGetParticipantResponses[keyof V1TranscriptGetParticipantResponses];

export type V1TranscriptUpdateParticipantData = {
  body: UpdateParticipant;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
    /**
     * Participant Id
     */
    participant_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/participants/{participant_id}";
};

export type V1TranscriptUpdateParticipantErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptUpdateParticipantError =
  V1TranscriptUpdateParticipantErrors[keyof V1TranscriptUpdateParticipantErrors];

export type V1TranscriptUpdateParticipantResponses = {
  /**
   * Successful Response
   */
  200: Participant;
};

export type V1TranscriptUpdateParticipantResponse =
  V1TranscriptUpdateParticipantResponses[keyof V1TranscriptUpdateParticipantResponses];

export type V1TranscriptAssignSpeakerData = {
  body: SpeakerAssignment;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/speaker/assign";
};

export type V1TranscriptAssignSpeakerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptAssignSpeakerError =
  V1TranscriptAssignSpeakerErrors[keyof V1TranscriptAssignSpeakerErrors];

export type V1TranscriptAssignSpeakerResponses = {
  /**
   * Successful Response
   */
  200: SpeakerAssignmentStatus;
};

export type V1TranscriptAssignSpeakerResponse =
  V1TranscriptAssignSpeakerResponses[keyof V1TranscriptAssignSpeakerResponses];

export type V1TranscriptMergeSpeakerData = {
  body: SpeakerMerge;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/speaker/merge";
};

export type V1TranscriptMergeSpeakerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptMergeSpeakerError =
  V1TranscriptMergeSpeakerErrors[keyof V1TranscriptMergeSpeakerErrors];

export type V1TranscriptMergeSpeakerResponses = {
  /**
   * Successful Response
   */
  200: SpeakerAssignmentStatus;
};

export type V1TranscriptMergeSpeakerResponse =
  V1TranscriptMergeSpeakerResponses[keyof V1TranscriptMergeSpeakerResponses];

export type V1TranscriptRecordUploadData = {
  body: BodyTranscriptRecordUploadV1TranscriptsTranscriptIdRecordUploadPost;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query: {
    /**
     * Chunk Number
     */
    chunk_number: number;
    /**
     * Total Chunks
     */
    total_chunks: number;
  };
  url: "/v1/transcripts/{transcript_id}/record/upload";
};

export type V1TranscriptRecordUploadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptRecordUploadError =
  V1TranscriptRecordUploadErrors[keyof V1TranscriptRecordUploadErrors];

export type V1TranscriptRecordUploadResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1TranscriptGetWebsocketEventsData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/events";
};

export type V1TranscriptGetWebsocketEventsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptGetWebsocketEventsError =
  V1TranscriptGetWebsocketEventsErrors[keyof V1TranscriptGetWebsocketEventsErrors];

export type V1TranscriptGetWebsocketEventsResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1TranscriptRecordWebrtcData = {
  body: RtcOffer;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/record/webrtc";
};

export type V1TranscriptRecordWebrtcErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptRecordWebrtcError =
  V1TranscriptRecordWebrtcErrors[keyof V1TranscriptRecordWebrtcErrors];

export type V1TranscriptRecordWebrtcResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1TranscriptProcessData = {
  body?: never;
  path: {
    /**
     * Transcript Id
     */
    transcript_id: string;
  };
  query?: never;
  url: "/v1/transcripts/{transcript_id}/process";
};

export type V1TranscriptProcessErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1TranscriptProcessError =
  V1TranscriptProcessErrors[keyof V1TranscriptProcessErrors];

export type V1TranscriptProcessResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type V1UserMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/me";
};

export type V1UserMeResponses = {
  /**
   * Response User Me V1 Me Get
   * Successful Response
   */
  200: UserInfo | null;
};

export type V1UserMeResponse = V1UserMeResponses[keyof V1UserMeResponses];

export type V1ZulipGetStreamsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/zulip/streams";
};

export type V1ZulipGetStreamsResponses = {
  /**
   * Response Zulip Get Streams V1 Zulip Streams Get
   * Successful Response
   */
  200: Array<Stream>;
};

export type V1ZulipGetStreamsResponse =
  V1ZulipGetStreamsResponses[keyof V1ZulipGetStreamsResponses];

export type V1ZulipGetTopicsData = {
  body?: never;
  path: {
    /**
     * Stream Id
     */
    stream_id: number;
  };
  query?: never;
  url: "/v1/zulip/streams/{stream_id}/topics";
};

export type V1ZulipGetTopicsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1ZulipGetTopicsError =
  V1ZulipGetTopicsErrors[keyof V1ZulipGetTopicsErrors];

export type V1ZulipGetTopicsResponses = {
  /**
   * Response Zulip Get Topics V1 Zulip Streams  Stream Id  Topics Get
   * Successful Response
   */
  200: Array<Topic>;
};

export type V1ZulipGetTopicsResponse =
  V1ZulipGetTopicsResponses[keyof V1ZulipGetTopicsResponses];

export type V1WherebyWebhookData = {
  body: WherebyWebhookEvent;
  path?: never;
  query?: never;
  url: "/v1/whereby";
};

export type V1WherebyWebhookErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type V1WherebyWebhookError =
  V1WherebyWebhookErrors[keyof V1WherebyWebhookErrors];

export type V1WherebyWebhookResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type ClientOptions = {
  baseUrl: "http://127.0.0.1:1250" | (string & {});
};
